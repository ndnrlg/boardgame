{"ast":null,"code":"/* global define */\n'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nvar SourceNode = undefined;\n\ntry {\n  /* istanbul ignore next */\n  if (typeof define !== 'function' || !define.amd) {\n    // We don't support this in AMD environments. For these environments, we asusme that\n    // they are running on the browser and thus have no need for the source-map library.\n    var SourceMap = require('source-map');\n\n    SourceNode = SourceMap.SourceNode;\n  }\n} catch (err) {}\n/* NOP */\n\n/* istanbul ignore if: tested but not covered in istanbul due to dist build  */\n\n\nif (!SourceNode) {\n  SourceNode = function (line, column, srcFile, chunks) {\n    this.src = '';\n\n    if (chunks) {\n      this.add(chunks);\n    }\n  };\n  /* istanbul ignore next */\n\n\n  SourceNode.prototype = {\n    add: function add(chunks) {\n      if (_utils.isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n\n      this.src += chunks;\n    },\n    prepend: function prepend(chunks) {\n      if (_utils.isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n\n      this.src = chunks + this.src;\n    },\n    toStringWithSourceMap: function toStringWithSourceMap() {\n      return {\n        code: this.toString()\n      };\n    },\n    toString: function toString() {\n      return this.src;\n    }\n  };\n}\n\nfunction castChunk(chunk, codeGen, loc) {\n  if (_utils.isArray(chunk)) {\n    var ret = [];\n\n    for (var i = 0, len = chunk.length; i < len; i++) {\n      ret.push(codeGen.wrap(chunk[i], loc));\n    }\n\n    return ret;\n  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n    // Handle primitives that the SourceNode will throw up on\n    return chunk + '';\n  }\n\n  return chunk;\n}\n\nfunction CodeGen(srcFile) {\n  this.srcFile = srcFile;\n  this.source = [];\n}\n\nCodeGen.prototype = {\n  isEmpty: function isEmpty() {\n    return !this.source.length;\n  },\n  prepend: function prepend(source, loc) {\n    this.source.unshift(this.wrap(source, loc));\n  },\n  push: function push(source, loc) {\n    this.source.push(this.wrap(source, loc));\n  },\n  merge: function merge() {\n    var source = this.empty();\n    this.each(function (line) {\n      source.add(['  ', line, '\\n']);\n    });\n    return source;\n  },\n  each: function each(iter) {\n    for (var i = 0, len = this.source.length; i < len; i++) {\n      iter(this.source[i]);\n    }\n  },\n  empty: function empty() {\n    var loc = this.currentLocation || {\n      start: {}\n    };\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n  },\n  wrap: function wrap(chunk) {\n    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || {\n      start: {}\n    } : arguments[1];\n\n    if (chunk instanceof SourceNode) {\n      return chunk;\n    }\n\n    chunk = castChunk(chunk, this, loc);\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);\n  },\n  functionCall: function functionCall(fn, type, params) {\n    params = this.generateList(params);\n    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);\n  },\n  quotedString: function quotedString(str) {\n    return '\"' + (str + '').replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\u2028/g, '\\\\u2028') // Per Ecma-262 7.3 + 7.8.4\n    .replace(/\\u2029/g, '\\\\u2029') + '\"';\n  },\n  objectLiteral: function objectLiteral(obj) {\n    // istanbul ignore next\n    var _this = this;\n\n    var pairs = [];\n    Object.keys(obj).forEach(function (key) {\n      var value = castChunk(obj[key], _this);\n\n      if (value !== 'undefined') {\n        pairs.push([_this.quotedString(key), ':', value]);\n      }\n    });\n    var ret = this.generateList(pairs);\n    ret.prepend('{');\n    ret.add('}');\n    return ret;\n  },\n  generateList: function generateList(entries) {\n    var ret = this.empty();\n\n    for (var i = 0, len = entries.length; i < len; i++) {\n      if (i) {\n        ret.add(',');\n      }\n\n      ret.add(castChunk(entries[i], this));\n    }\n\n    return ret;\n  },\n  generateArray: function generateArray(entries) {\n    var ret = this.generateList(entries);\n    ret.prepend('[');\n    ret.add(']');\n    return ret;\n  }\n};\nexports['default'] = CodeGen;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":"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","names":["SourceNode","define","amd","SourceMap","require","err","line","column","srcFile","chunks","src","add","prototype","_utils","join","prepend","toStringWithSourceMap","code","toString","castChunk","chunk","codeGen","loc","ret","i","len","length","push","wrap","CodeGen","source","isEmpty","unshift","merge","empty","each","iter","currentLocation","start","arguments","functionCall","fn","type","params","generateList","quotedString","str","replace","objectLiteral","obj","pairs","Object","keys","forEach","value","key","_this","entries","generateArray"],"sources":["/Users/nandinineralagi/hw3/hw3-santorini-ndnrlg/frontend/node_modules/handlebars/lib/handlebars/compiler/code-gen.js"],"sourcesContent":["/* global define */\nimport { isArray } from '../utils';\n\nlet SourceNode;\n\ntry {\n  /* istanbul ignore next */\n  if (typeof define !== 'function' || !define.amd) {\n    // We don't support this in AMD environments. For these environments, we asusme that\n    // they are running on the browser and thus have no need for the source-map library.\n    let SourceMap = require('source-map');\n    SourceNode = SourceMap.SourceNode;\n  }\n} catch (err) {\n  /* NOP */\n}\n\n/* istanbul ignore if: tested but not covered in istanbul due to dist build  */\nif (!SourceNode) {\n  SourceNode = function(line, column, srcFile, chunks) {\n    this.src = '';\n    if (chunks) {\n      this.add(chunks);\n    }\n  };\n  /* istanbul ignore next */\n  SourceNode.prototype = {\n    add: function(chunks) {\n      if (isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src += chunks;\n    },\n    prepend: function(chunks) {\n      if (isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src = chunks + this.src;\n    },\n    toStringWithSourceMap: function() {\n      return { code: this.toString() };\n    },\n    toString: function() {\n      return this.src;\n    }\n  };\n}\n\nfunction castChunk(chunk, codeGen, loc) {\n  if (isArray(chunk)) {\n    let ret = [];\n\n    for (let i = 0, len = chunk.length; i < len; i++) {\n      ret.push(codeGen.wrap(chunk[i], loc));\n    }\n    return ret;\n  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n    // Handle primitives that the SourceNode will throw up on\n    return chunk + '';\n  }\n  return chunk;\n}\n\nfunction CodeGen(srcFile) {\n  this.srcFile = srcFile;\n  this.source = [];\n}\n\nCodeGen.prototype = {\n  isEmpty() {\n    return !this.source.length;\n  },\n  prepend: function(source, loc) {\n    this.source.unshift(this.wrap(source, loc));\n  },\n  push: function(source, loc) {\n    this.source.push(this.wrap(source, loc));\n  },\n\n  merge: function() {\n    let source = this.empty();\n    this.each(function(line) {\n      source.add(['  ', line, '\\n']);\n    });\n    return source;\n  },\n\n  each: function(iter) {\n    for (let i = 0, len = this.source.length; i < len; i++) {\n      iter(this.source[i]);\n    }\n  },\n\n  empty: function() {\n    let loc = this.currentLocation || { start: {} };\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n  },\n  wrap: function(chunk, loc = this.currentLocation || { start: {} }) {\n    if (chunk instanceof SourceNode) {\n      return chunk;\n    }\n\n    chunk = castChunk(chunk, this, loc);\n\n    return new SourceNode(\n      loc.start.line,\n      loc.start.column,\n      this.srcFile,\n      chunk\n    );\n  },\n\n  functionCall: function(fn, type, params) {\n    params = this.generateList(params);\n    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);\n  },\n\n  quotedString: function(str) {\n    return (\n      '\"' +\n      (str + '')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g, '\\\\\"')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\u2028/g, '\\\\u2028') // Per Ecma-262 7.3 + 7.8.4\n        .replace(/\\u2029/g, '\\\\u2029') +\n      '\"'\n    );\n  },\n\n  objectLiteral: function(obj) {\n    let pairs = [];\n\n    Object.keys(obj).forEach(key => {\n      let value = castChunk(obj[key], this);\n      if (value !== 'undefined') {\n        pairs.push([this.quotedString(key), ':', value]);\n      }\n    });\n\n    let ret = this.generateList(pairs);\n    ret.prepend('{');\n    ret.add('}');\n    return ret;\n  },\n\n  generateList: function(entries) {\n    let ret = this.empty();\n\n    for (let i = 0, len = entries.length; i < len; i++) {\n      if (i) {\n        ret.add(',');\n      }\n\n      ret.add(castChunk(entries[i], this));\n    }\n\n    return ret;\n  },\n\n  generateArray: function(entries) {\n    let ret = this.generateList(entries);\n    ret.prepend('[');\n    ret.add(']');\n\n    return ret;\n  }\n};\n\nexport default CodeGen;\n"]},"metadata":{},"sourceType":"script"}