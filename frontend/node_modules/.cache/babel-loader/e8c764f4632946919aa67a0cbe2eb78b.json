{"ast":null,"code":"'use strict';\n\nexports.__esModule = true; // istanbul ignore next\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _utils = require('../utils');\n\nvar _exception = require('../exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nexports['default'] = function (instance) {\n  instance.registerHelper('each', function (context, options) {\n    if (!options) {\n      throw new _exception2['default']('Must pass iterator to #each');\n    }\n\n    var fn = options.fn,\n        inverse = options.inverse,\n        i = 0,\n        ret = '',\n        data = undefined,\n        contextPath = undefined;\n\n    if (options.data && options.ids) {\n      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = _utils.createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret = ret + fn(context[field], {\n        data: data,\n        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])\n      });\n    }\n\n    if (context && typeof context === 'object') {\n      if (_utils.isArray(context)) {\n        for (var j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else if (global.Symbol && context[global.Symbol.iterator]) {\n        var newContext = [];\n        var iterator = context[global.Symbol.iterator]();\n\n        for (var it = iterator.next(); !it.done; it = iterator.next()) {\n          newContext.push(it.value);\n        }\n\n        context = newContext;\n\n        for (var j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        (function () {\n          var priorKey = undefined;\n          Object.keys(context).forEach(function (key) {\n            // We're running the iterations one step out of sync so we can detect\n            // the last iteration without have to scan the object twice and create\n            // an itermediate keys array.\n            if (priorKey !== undefined) {\n              execIteration(priorKey, i - 1);\n            }\n\n            priorKey = key;\n            i++;\n          });\n\n          if (priorKey !== undefined) {\n            execIteration(priorKey, i - 1, true);\n          }\n        })();\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n};\n\nmodule.exports = exports['default'];","map":{"version":3,"mappings":"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","names":["instance","registerHelper","context","options","fn","inverse","i","ret","data","contextPath","ids","_utils","call","execIteration","field","index","last","key","first","blockParams","j","length","global","Symbol","iterator","newContext","it","next","done","push","value","priorKey","Object","keys","forEach","undefined"],"sources":["/Users/nandinineralagi/hw3/hw3-santorini-ndnrlg/frontend/node_modules/handlebars/lib/handlebars/helpers/each.js"],"sourcesContent":["import {\n  appendContextPath,\n  blockParams,\n  createFrame,\n  isArray,\n  isFunction\n} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('each', function(context, options) {\n    if (!options) {\n      throw new Exception('Must pass iterator to #each');\n    }\n\n    let fn = options.fn,\n      inverse = options.inverse,\n      i = 0,\n      ret = '',\n      data,\n      contextPath;\n\n    if (options.data && options.ids) {\n      contextPath =\n        appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret =\n        ret +\n        fn(context[field], {\n          data: data,\n          blockParams: blockParams(\n            [context[field], field],\n            [contextPath + field, null]\n          )\n        });\n    }\n\n    if (context && typeof context === 'object') {\n      if (isArray(context)) {\n        for (let j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else if (global.Symbol && context[global.Symbol.iterator]) {\n        const newContext = [];\n        const iterator = context[global.Symbol.iterator]();\n        for (let it = iterator.next(); !it.done; it = iterator.next()) {\n          newContext.push(it.value);\n        }\n        context = newContext;\n        for (let j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        let priorKey;\n\n        Object.keys(context).forEach(key => {\n          // We're running the iterations one step out of sync so we can detect\n          // the last iteration without have to scan the object twice and create\n          // an itermediate keys array.\n          if (priorKey !== undefined) {\n            execIteration(priorKey, i - 1);\n          }\n          priorKey = key;\n          i++;\n        });\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n}\n"]},"metadata":{},"sourceType":"script"}