{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar errorProps = ['description', 'fileName', 'lineNumber', 'endLineNumber', 'message', 'name', 'number', 'stack'];\n\nfunction Exception(message, node) {\n  var loc = node && node.loc,\n      line = undefined,\n      endLineNumber = undefined,\n      column = undefined,\n      endColumn = undefined;\n\n  if (loc) {\n    line = loc.start.line;\n    endLineNumber = loc.end.line;\n    column = loc.start.column;\n    endColumn = loc.end.column;\n    message += ' - ' + line + ':' + column;\n  }\n\n  var tmp = Error.prototype.constructor.call(this, message); // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n\n  for (var idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]] = tmp[errorProps[idx]];\n  }\n  /* istanbul ignore else */\n\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, Exception);\n  }\n\n  try {\n    if (loc) {\n      this.lineNumber = line;\n      this.endLineNumber = endLineNumber; // Work around issue under safari where we can't directly set the column value\n\n      /* istanbul ignore next */\n\n      if (Object.defineProperty) {\n        Object.defineProperty(this, 'column', {\n          value: column,\n          enumerable: true\n        });\n        Object.defineProperty(this, 'endColumn', {\n          value: endColumn,\n          enumerable: true\n        });\n      } else {\n        this.column = column;\n        this.endColumn = endColumn;\n      }\n    }\n  } catch (nop) {\n    /* Ignore if the browser is very particular */\n  }\n}\n\nException.prototype = new Error();\nexports['default'] = Exception;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;AAAA,IAAMA,UAAU,GAAG,CACjB,aADiB,EAEjB,UAFiB,EAGjB,YAHiB,EAIjB,eAJiB,EAKjB,SALiB,EAMjB,MANiB,EAOjB,QAPiB,EAQjB,OARiB,CAAnB;;AAWA,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,IAA5B,EAAkC;AAChC,MAAIC,GAAG,GAAGD,IAAI,IAAIA,IAAI,CAACC,GAAvB;AAAA,MACEC,IAAI,YADN;AAAA,MAEEC,aAAa,YAFf;AAAA,MAGEC,MAAM,YAHR;AAAA,MAIEC,SAAS,YAJX;;AAMA,MAAIJ,GAAJ,EAAS;AACPC,QAAI,GAAGD,GAAG,CAACK,KAAJ,CAAUJ,IAAjB;AACAC,iBAAa,GAAGF,GAAG,CAACM,GAAJ,CAAQL,IAAxB;AACAE,UAAM,GAAGH,GAAG,CAACK,KAAJ,CAAUF,MAAnB;AACAC,aAAS,GAAGJ,GAAG,CAACM,GAAJ,CAAQH,MAApB;AAEAL,WAAO,IAAI,QAAQG,IAAR,GAAe,GAAf,GAAqBE,MAAhC;AACD;;AAED,MAAII,GAAG,GAAGC,KAAK,CAACC,SAAN,CAAgBC,WAAhB,CAA4BC,IAA5B,CAAiC,IAAjC,EAAuCb,OAAvC,CAAV,CAhBgC;;AAmBhC,OAAK,IAAIc,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGhB,UAAU,CAACiB,MAAnC,EAA2CD,GAAG,EAA9C,EAAkD;AAChD,SAAKhB,UAAU,CAACgB,GAAD,CAAf,IAAwBL,GAAG,CAACX,UAAU,CAACgB,GAAD,CAAX,CAA3B;AACD;;;;AAGD,MAAIJ,KAAK,CAACM,iBAAV,EAA6B;AAC3BN,SAAK,CAACM,iBAAN,CAAwB,IAAxB,EAA8BjB,SAA9B;AACD;;AAED,MAAI;AACF,QAAIG,GAAJ,EAAS;AACP,WAAKe,UAAL,GAAkBd,IAAlB;AACA,WAAKC,aAAL,GAAqBA,aAArB,CAFO;;;;AAMP,UAAIc,MAAM,CAACC,cAAX,EAA2B;AACzBD,cAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;AACpCC,eAAK,EAAEf,MAD6B;AAEpCgB,oBAAU,EAAE;AAFwB,SAAtC;AAIAH,cAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,WAA5B,EAAyC;AACvCC,eAAK,EAAEd,SADgC;AAEvCe,oBAAU,EAAE;AAF2B,SAAzC;AAID,OATD,MASO;AACL,aAAKhB,MAAL,GAAcA,MAAd;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACD;AACF;AACF,GArBD,CAqBE,OAAOgB,GAAP,EAAY;;AAEb;AACF;;AAEDvB,SAAS,CAACY,SAAV,GAAsB,IAAID,KAAJ,EAAtB;qBAEeX","names":["errorProps","Exception","message","node","loc","line","endLineNumber","column","endColumn","start","end","tmp","Error","prototype","constructor","call","idx","length","captureStackTrace","lineNumber","Object","defineProperty","value","enumerable","nop"],"sources":["/Users/nandinineralagi/hw3/hw3-santorini-ndnrlg/frontend/node_modules/handlebars/lib/handlebars/exception.js"],"sourcesContent":["const errorProps = [\n  'description',\n  'fileName',\n  'lineNumber',\n  'endLineNumber',\n  'message',\n  'name',\n  'number',\n  'stack'\n];\n\nfunction Exception(message, node) {\n  let loc = node && node.loc,\n    line,\n    endLineNumber,\n    column,\n    endColumn;\n\n  if (loc) {\n    line = loc.start.line;\n    endLineNumber = loc.end.line;\n    column = loc.start.column;\n    endColumn = loc.end.column;\n\n    message += ' - ' + line + ':' + column;\n  }\n\n  let tmp = Error.prototype.constructor.call(this, message);\n\n  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n  for (let idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]] = tmp[errorProps[idx]];\n  }\n\n  /* istanbul ignore else */\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, Exception);\n  }\n\n  try {\n    if (loc) {\n      this.lineNumber = line;\n      this.endLineNumber = endLineNumber;\n\n      // Work around issue under safari where we can't directly set the column value\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(this, 'column', {\n          value: column,\n          enumerable: true\n        });\n        Object.defineProperty(this, 'endColumn', {\n          value: endColumn,\n          enumerable: true\n        });\n      } else {\n        this.column = column;\n        this.endColumn = endColumn;\n      }\n    }\n  } catch (nop) {\n    /* Ignore if the browser is very particular */\n  }\n}\n\nException.prototype = new Error();\n\nexport default Exception;\n"]},"metadata":{},"sourceType":"script"}