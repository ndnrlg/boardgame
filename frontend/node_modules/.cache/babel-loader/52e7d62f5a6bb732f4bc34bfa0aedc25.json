{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.extend = extend;\nexports.indexOf = indexOf;\nexports.escapeExpression = escapeExpression;\nexports.isEmpty = isEmpty;\nexports.createFrame = createFrame;\nexports.blockParams = blockParams;\nexports.appendContextPath = appendContextPath;\nvar escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\nvar badChars = /[&<>\"'`=]/g,\n    possible = /[&<>\"'`=]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nfunction extend(obj\n/* , ...source */\n) {\n  for (var i = 1; i < arguments.length; i++) {\n    for (var key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nvar toString = Object.prototype.toString;\nexports.toString = toString; // Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n\n/* eslint-disable func-style */\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n}; // fallback for older versions of Chrome and Safari\n\n/* istanbul ignore next */\n\n\nif (isFunction(/x/)) {\n  exports.isFunction = isFunction = function (value) {\n    return typeof value === 'function' && toString.call(value) === '[object Function]';\n  };\n}\n\nexports.isFunction = isFunction;\n/* eslint-enable func-style */\n\n/* istanbul ignore next */\n\nvar isArray = Array.isArray || function (value) {\n  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;\n};\n\nexports.isArray = isArray; // Older IE versions do not directly support indexOf so we must implement our own, sadly.\n\nfunction indexOf(array, value) {\n  for (var i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    } // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n\n\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) {\n    return string;\n  }\n\n  return string.replace(badChars, escapeChar);\n}\n\nfunction isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction createFrame(object) {\n  var frame = extend({}, object);\n  frame._parent = object;\n  return frame;\n}\n\nfunction blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nfunction appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}","map":{"version":3,"mappings":"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","names":["escape","badChars","possible","escapeChar","chr","extend","obj","i","arguments","length","key","Object","prototype","hasOwnProperty","call","toString","isFunction","value","exports","isArray","Array","indexOf","array","len","escapeExpression","string","toHTML","test","replace","isEmpty","createFrame","object","frame","_parent","blockParams","params","ids","path","appendContextPath","contextPath","id"],"sources":["/Users/nandinineralagi/hw3/hw3-santorini-ndnrlg/frontend/node_modules/handlebars/lib/handlebars/utils.js"],"sourcesContent":["const escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nconst badChars = /[&<>\"'`=]/g,\n  possible = /[&<>\"'`=]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nexport function extend(obj /* , ...source */) {\n  for (let i = 1; i < arguments.length; i++) {\n    for (let key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nexport let toString = Object.prototype.toString;\n\n// Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n/* eslint-disable func-style */\nlet isFunction = function(value) {\n  return typeof value === 'function';\n};\n// fallback for older versions of Chrome and Safari\n/* istanbul ignore next */\nif (isFunction(/x/)) {\n  isFunction = function(value) {\n    return (\n      typeof value === 'function' &&\n      toString.call(value) === '[object Function]'\n    );\n  };\n}\nexport { isFunction };\n/* eslint-enable func-style */\n\n/* istanbul ignore next */\nexport const isArray =\n  Array.isArray ||\n  function(value) {\n    return value && typeof value === 'object'\n      ? toString.call(value) === '[object Array]'\n      : false;\n  };\n\n// Older IE versions do not directly support indexOf so we must implement our own, sadly.\nexport function indexOf(array, value) {\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) {\n    return string;\n  }\n  return string.replace(badChars, escapeChar);\n}\n\nexport function isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function createFrame(object) {\n  let frame = extend({}, object);\n  frame._parent = object;\n  return frame;\n}\n\nexport function blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nexport function appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}\n"]},"metadata":{},"sourceType":"script"}