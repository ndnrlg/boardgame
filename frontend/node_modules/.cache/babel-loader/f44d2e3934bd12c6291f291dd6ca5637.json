{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.createProtoAccessControl = createProtoAccessControl;\nexports.resultIsAllowed = resultIsAllowed;\nexports.resetLoggedProperties = resetLoggedProperties; // istanbul ignore next\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nvar _createNewLookupObject = require('./create-new-lookup-object');\n\nvar _logger = require('../logger');\n\nvar logger = _interopRequireWildcard(_logger);\n\nvar loggedProperties = Object.create(null);\n\nfunction createProtoAccessControl(runtimeOptions) {\n  var defaultMethodWhiteList = Object.create(null);\n  defaultMethodWhiteList['constructor'] = false;\n  defaultMethodWhiteList['__defineGetter__'] = false;\n  defaultMethodWhiteList['__defineSetter__'] = false;\n  defaultMethodWhiteList['__lookupGetter__'] = false;\n  var defaultPropertyWhiteList = Object.create(null); // eslint-disable-next-line no-proto\n\n  defaultPropertyWhiteList['__proto__'] = false;\n  return {\n    properties: {\n      whitelist: _createNewLookupObject.createNewLookupObject(defaultPropertyWhiteList, runtimeOptions.allowedProtoProperties),\n      defaultValue: runtimeOptions.allowProtoPropertiesByDefault\n    },\n    methods: {\n      whitelist: _createNewLookupObject.createNewLookupObject(defaultMethodWhiteList, runtimeOptions.allowedProtoMethods),\n      defaultValue: runtimeOptions.allowProtoMethodsByDefault\n    }\n  };\n}\n\nfunction resultIsAllowed(result, protoAccessControl, propertyName) {\n  if (typeof result === 'function') {\n    return checkWhiteList(protoAccessControl.methods, propertyName);\n  } else {\n    return checkWhiteList(protoAccessControl.properties, propertyName);\n  }\n}\n\nfunction checkWhiteList(protoAccessControlForType, propertyName) {\n  if (protoAccessControlForType.whitelist[propertyName] !== undefined) {\n    return protoAccessControlForType.whitelist[propertyName] === true;\n  }\n\n  if (protoAccessControlForType.defaultValue !== undefined) {\n    return protoAccessControlForType.defaultValue;\n  }\n\n  logUnexpecedPropertyAccessOnce(propertyName);\n  return false;\n}\n\nfunction logUnexpecedPropertyAccessOnce(propertyName) {\n  if (loggedProperties[propertyName] !== true) {\n    loggedProperties[propertyName] = true;\n    logger.log('error', 'Handlebars: Access has been denied to resolve the property \"' + propertyName + '\" because it is not an \"own property\" of its parent.\\n' + 'You can add a runtime option to disable the check or this warning:\\n' + 'See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details');\n  }\n}\n\nfunction resetLoggedProperties() {\n  Object.keys(loggedProperties).forEach(function (propertyName) {\n    delete loggedProperties[propertyName];\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;qCAAsC;;sBACd;;IAAZA,MAAM;;AAElB,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;;AAEO,SAASC,wBAAT,CAAkCC,cAAlC,EAAkD;AACvD,MAAIC,sBAAsB,GAAGJ,MAAM,CAACC,MAAP,CAAc,IAAd,CAA7B;AACAG,wBAAsB,CAAC,aAAD,CAAtB,GAAwC,KAAxC;AACAA,wBAAsB,CAAC,kBAAD,CAAtB,GAA6C,KAA7C;AACAA,wBAAsB,CAAC,kBAAD,CAAtB,GAA6C,KAA7C;AACAA,wBAAsB,CAAC,kBAAD,CAAtB,GAA6C,KAA7C;AAEA,MAAIC,wBAAwB,GAAGL,MAAM,CAACC,MAAP,CAAc,IAAd,CAA/B,CAPuD;;AASvDI,0BAAwB,CAAC,WAAD,CAAxB,GAAwC,KAAxC;AAEA,SAAO;AACLC,cAAU,EAAE;AACVC,eAAS,EAAEC,6CACTH,wBADS,EAETF,cAAc,CAACM,sBAFN,CADD;AAKVC,kBAAY,EAAEP,cAAc,CAACQ;AALnB,KADP;AAQLC,WAAO,EAAE;AACPL,eAAS,EAAEC,6CACTJ,sBADS,EAETD,cAAc,CAACU,mBAFN,CADJ;AAKPH,kBAAY,EAAEP,cAAc,CAACW;AALtB;AARJ,GAAP;AAgBD;;AAEM,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,kBAAjC,EAAqDC,YAArD,EAAmE;AACxE,MAAI,OAAOF,MAAP,KAAkB,UAAtB,EAAkC;AAChC,WAAOG,cAAc,CAACF,kBAAkB,CAACL,OAApB,EAA6BM,YAA7B,CAArB;AACD,GAFD,MAEO;AACL,WAAOC,cAAc,CAACF,kBAAkB,CAACX,UAApB,EAAgCY,YAAhC,CAArB;AACD;AACF;;AAED,SAASC,cAAT,CAAwBC,yBAAxB,EAAmDF,YAAnD,EAAiE;AAC/D,MAAIE,yBAAyB,CAACb,SAA1B,CAAoCW,YAApC,MAAsDG,SAA1D,EAAqE;AACnE,WAAOD,yBAAyB,CAACb,SAA1B,CAAoCW,YAApC,MAAsD,IAA7D;AACD;;AACD,MAAIE,yBAAyB,CAACV,YAA1B,KAA2CW,SAA/C,EAA0D;AACxD,WAAOD,yBAAyB,CAACV,YAAjC;AACD;;AACDY,gCAA8B,CAACJ,YAAD,CAA9B;AACA,SAAO,KAAP;AACD;;AAED,SAASI,8BAAT,CAAwCJ,YAAxC,EAAsD;AACpD,MAAInB,gBAAgB,CAACmB,YAAD,CAAhB,KAAmC,IAAvC,EAA6C;AAC3CnB,oBAAgB,CAACmB,YAAD,CAAhB,GAAiC,IAAjC;AACApB,UAAM,CAACyB,GAAP,CACE,OADF,EAEE,iEAA+DL,YAA/D,GAA2E,wDAA3E,GAA2E,sEAA3E,GACwE,iHAH1E;AAMD;AACF;;AAEM,SAASM,qBAAT,GAAiC;AACtCxB,QAAM,CAACyB,IAAP,CAAY1B,gBAAZ,EAA8B2B,OAA9B,CAAsC,wBAAgB;AACpD,WAAO3B,gBAAgB,CAACmB,YAAD,CAAvB;AACD,GAFD;AAGD","names":["logger","loggedProperties","Object","create","createProtoAccessControl","runtimeOptions","defaultMethodWhiteList","defaultPropertyWhiteList","properties","whitelist","_createNewLookupObject","allowedProtoProperties","defaultValue","allowProtoPropertiesByDefault","methods","allowedProtoMethods","allowProtoMethodsByDefault","resultIsAllowed","result","protoAccessControl","propertyName","checkWhiteList","protoAccessControlForType","undefined","logUnexpecedPropertyAccessOnce","log","resetLoggedProperties","keys","forEach"],"sources":["/Users/nandinineralagi/hw3/hw3-santorini-ndnrlg/frontend/node_modules/handlebars/lib/handlebars/internal/proto-access.js"],"sourcesContent":["import { createNewLookupObject } from './create-new-lookup-object';\nimport * as logger from '../logger';\n\nconst loggedProperties = Object.create(null);\n\nexport function createProtoAccessControl(runtimeOptions) {\n  let defaultMethodWhiteList = Object.create(null);\n  defaultMethodWhiteList['constructor'] = false;\n  defaultMethodWhiteList['__defineGetter__'] = false;\n  defaultMethodWhiteList['__defineSetter__'] = false;\n  defaultMethodWhiteList['__lookupGetter__'] = false;\n\n  let defaultPropertyWhiteList = Object.create(null);\n  // eslint-disable-next-line no-proto\n  defaultPropertyWhiteList['__proto__'] = false;\n\n  return {\n    properties: {\n      whitelist: createNewLookupObject(\n        defaultPropertyWhiteList,\n        runtimeOptions.allowedProtoProperties\n      ),\n      defaultValue: runtimeOptions.allowProtoPropertiesByDefault\n    },\n    methods: {\n      whitelist: createNewLookupObject(\n        defaultMethodWhiteList,\n        runtimeOptions.allowedProtoMethods\n      ),\n      defaultValue: runtimeOptions.allowProtoMethodsByDefault\n    }\n  };\n}\n\nexport function resultIsAllowed(result, protoAccessControl, propertyName) {\n  if (typeof result === 'function') {\n    return checkWhiteList(protoAccessControl.methods, propertyName);\n  } else {\n    return checkWhiteList(protoAccessControl.properties, propertyName);\n  }\n}\n\nfunction checkWhiteList(protoAccessControlForType, propertyName) {\n  if (protoAccessControlForType.whitelist[propertyName] !== undefined) {\n    return protoAccessControlForType.whitelist[propertyName] === true;\n  }\n  if (protoAccessControlForType.defaultValue !== undefined) {\n    return protoAccessControlForType.defaultValue;\n  }\n  logUnexpecedPropertyAccessOnce(propertyName);\n  return false;\n}\n\nfunction logUnexpecedPropertyAccessOnce(propertyName) {\n  if (loggedProperties[propertyName] !== true) {\n    loggedProperties[propertyName] = true;\n    logger.log(\n      'error',\n      `Handlebars: Access has been denied to resolve the property \"${propertyName}\" because it is not an \"own property\" of its parent.\\n` +\n        `You can add a runtime option to disable the check or this warning:\\n` +\n        `See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details`\n    );\n  }\n}\n\nexport function resetLoggedProperties() {\n  Object.keys(loggedProperties).forEach(propertyName => {\n    delete loggedProperties[propertyName];\n  });\n}\n"]},"metadata":{},"sourceType":"script"}