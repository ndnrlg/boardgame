{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nexports['default'] = function (instance) {\n  instance.registerHelper('blockHelperMissing', function (context, options) {\n    var inverse = options.inverse,\n        fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (_utils.isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        var data = _utils.createFrame(options.data);\n\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);\n        options = {\n          data: data\n        };\n      }\n\n      return fn(context, options);\n    }\n  });\n};\n\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;qBAAwD;;qBAEzC,UAASA,QAAT,EAAmB;AAChCA,UAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8C,UAASC,OAAT,EAAkBC,OAAlB,EAA2B;AACvE,QAAIC,OAAO,GAAGD,OAAO,CAACC,OAAtB;AAAA,QACEC,EAAE,GAAGF,OAAO,CAACE,EADf;;AAGA,QAAIH,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAOG,EAAE,CAAC,IAAD,CAAT;AACD,KAFD,MAEO,IAAIH,OAAO,KAAK,KAAZ,IAAqBA,OAAO,IAAI,IAApC,EAA0C;AAC/C,aAAOE,OAAO,CAAC,IAAD,CAAd;AACD,KAFM,MAEA,IAAIE,eAAQJ,OAAR,CAAJ,EAAsB;AAC3B,UAAIA,OAAO,CAACK,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAIJ,OAAO,CAACK,GAAZ,EAAiB;AACfL,iBAAO,CAACK,GAAR,GAAc,CAACL,OAAO,CAACM,IAAT,CAAd;AACD;;AAED,eAAOT,QAAQ,CAACU,OAAT,CAAiBC,IAAjB,CAAsBT,OAAtB,EAA+BC,OAA/B,CAAP;AACD,OAND,MAMO;AACL,eAAOC,OAAO,CAAC,IAAD,CAAd;AACD;AACF,KAVM,MAUA;AACL,UAAID,OAAO,CAACS,IAAR,IAAgBT,OAAO,CAACK,GAA5B,EAAiC;AAC/B,YAAII,IAAI,GAAGN,mBAAYH,OAAO,CAACS,IAApB,CAAX;;AACAA,YAAI,CAACC,WAAL,GAAmBP,yBACjBH,OAAO,CAACS,IAAR,CAAaC,WADI,EAEjBV,OAAO,CAACM,IAFS,CAAnB;AAIAN,eAAO,GAAG;AAAES,cAAI,EAAEA;AAAR,SAAV;AACD;;AAED,aAAOP,EAAE,CAACH,OAAD,EAAUC,OAAV,CAAT;AACD;AACF,GA9BD;AA+BD","names":["instance","registerHelper","context","options","inverse","fn","_utils","length","ids","name","helpers","each","data","contextPath"],"sources":["/Users/nandinineralagi/hw3/hw3-santorini-ndnrlg/frontend/node_modules/handlebars/lib/handlebars/helpers/block-helper-missing.js"],"sourcesContent":["import { appendContextPath, createFrame, isArray } from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('blockHelperMissing', function(context, options) {\n    let inverse = options.inverse,\n      fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        let data = createFrame(options.data);\n        data.contextPath = appendContextPath(\n          options.data.contextPath,\n          options.name\n        );\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}