{"ast":null,"code":"'use strict';\n\nexports.__esModule = true; // istanbul ignore next\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n} // istanbul ignore next\n\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nvar _handlebarsBase = require('./handlebars/base');\n\nvar base = _interopRequireWildcard(_handlebarsBase); // Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\n\n\nvar _handlebarsSafeString = require('./handlebars/safe-string');\n\nvar _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);\n\nvar _handlebarsException = require('./handlebars/exception');\n\nvar _handlebarsException2 = _interopRequireDefault(_handlebarsException);\n\nvar _handlebarsUtils = require('./handlebars/utils');\n\nvar Utils = _interopRequireWildcard(_handlebarsUtils);\n\nvar _handlebarsRuntime = require('./handlebars/runtime');\n\nvar runtime = _interopRequireWildcard(_handlebarsRuntime);\n\nvar _handlebarsNoConflict = require('./handlebars/no-conflict');\n\nvar _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict); // For compatibility and usage outside of module systems, make the Handlebars object a namespace\n\n\nfunction create() {\n  var hb = new base.HandlebarsEnvironment();\n  Utils.extend(hb, base);\n  hb.SafeString = _handlebarsSafeString2['default'];\n  hb.Exception = _handlebarsException2['default'];\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n  hb.VM = runtime;\n\n  hb.template = function (spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nvar inst = create();\ninst.create = create;\n\n_handlebarsNoConflict2['default'](inst);\n\ninst['default'] = inst;\nexports['default'] = inst;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAAsB;;IAAVA,IAAI,4C;;;;oCAIO;;;;mCACD;;;;+BACC;;IAAXC,KAAK;;iCACQ;;IAAbC,OAAO;;oCAEI;;;;;AAGvB,SAASC,MAAT,GAAkB;AAChB,MAAIC,EAAE,GAAG,IAAIJ,IAAI,CAACK,qBAAT,EAAT;AAEAJ,OAAK,CAACK,MAAN,CAAaF,EAAb,EAAiBJ,IAAjB;AACAI,IAAE,CAACG,UAAH,GAAaC,iCAAb;AACAJ,IAAE,CAACK,SAAH,GAAYC,gCAAZ;AACAN,IAAE,CAACH,KAAH,GAAWA,KAAX;AACAG,IAAE,CAACO,gBAAH,GAAsBV,KAAK,CAACU,gBAA5B;AAEAP,IAAE,CAACQ,EAAH,GAAQV,OAAR;;AACAE,IAAE,CAACS,QAAH,GAAc,UAASC,IAAT,EAAe;AAC3B,WAAOZ,OAAO,CAACW,QAAR,CAAiBC,IAAjB,EAAuBV,EAAvB,CAAP;AACD,GAFD;;AAIA,SAAOA,EAAP;AACD;;AAED,IAAIW,IAAI,GAAGZ,MAAM,EAAjB;AACAY,IAAI,CAACZ,MAAL,GAAcA,MAAd;;AAEAa,kCAAWD,IAAX;;AAEAA,IAAI,CAAC,SAAD,CAAJ,GAAkBA,IAAlB;qBAEeA","names":["base","Utils","runtime","create","hb","HandlebarsEnvironment","extend","SafeString","_handlebarsSafeString2","Exception","_handlebarsException2","escapeExpression","VM","template","spec","inst","_handlebarsNoConflict2"],"sources":["/Users/nandinineralagi/hw3/hw3-santorini-ndnrlg/frontend/node_modules/handlebars/lib/handlebars.runtime.js"],"sourcesContent":["import * as base from './handlebars/base';\n\n// Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\nimport SafeString from './handlebars/safe-string';\nimport Exception from './handlebars/exception';\nimport * as Utils from './handlebars/utils';\nimport * as runtime from './handlebars/runtime';\n\nimport noConflict from './handlebars/no-conflict';\n\n// For compatibility and usage outside of module systems, make the Handlebars object a namespace\nfunction create() {\n  let hb = new base.HandlebarsEnvironment();\n\n  Utils.extend(hb, base);\n  hb.SafeString = SafeString;\n  hb.Exception = Exception;\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n\n  hb.VM = runtime;\n  hb.template = function(spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nlet inst = create();\ninst.create = create;\n\nnoConflict(inst);\n\ninst['default'] = inst;\n\nexport default inst;\n"]},"metadata":{},"sourceType":"script"}