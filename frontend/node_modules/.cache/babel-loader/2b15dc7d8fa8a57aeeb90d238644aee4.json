{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar AST = {\n  // Public API used to evaluate derived attributes regarding AST nodes\n  helpers: {\n    // a mustache is definitely a helper if:\n    // * it is an eligible helper, and\n    // * it has at least one parameter or hash segment\n    helperExpression: function helperExpression(node) {\n      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);\n    },\n    scopedId: function scopedId(path) {\n      return /^\\.|this\\b/.test(path.original);\n    },\n    // an ID is simple if it only has one part, and that part is not\n    // `..` or `this`.\n    simpleId: function simpleId(path) {\n      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;\n    }\n  }\n}; // Must be exported as an object rather than the root of the module as the jison lexer\n// must modify the object to operate properly.\n\nexports['default'] = AST;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":";;;AAAA,IAAIA,GAAG,GAAG;;AAERC,SAAO,EAAE;;;;AAIPC,oBAAgB,EAAE,0BAASC,IAAT,EAAe;AAC/B,aACEA,IAAI,CAACC,IAAL,KAAc,eAAd,IACC,CAACD,IAAI,CAACC,IAAL,KAAc,mBAAd,IACAD,IAAI,CAACC,IAAL,KAAc,gBADf,KAEC,CAAC,EAAED,IAAK,CAACE,MAAN,IAAgBF,IAAI,CAACE,MAAL,CAAYC,MAA3B,IAAsCH,IAAI,CAACI,IAA9C,CAJL;AAMD,KAXM;AAaPC,YAAQ,EAAE,kBAASC,IAAT,EAAe;AACvB,aAAO,aAAaC,IAAb,CAAkBD,IAAI,CAACE,QAAvB,CAAP;AACD,KAfM;;;AAmBPC,YAAQ,EAAE,kBAASH,IAAT,EAAe;AACvB,aACEA,IAAI,CAACI,KAAL,CAAWP,MAAX,KAAsB,CAAtB,IAA2B,CAACN,GAAG,CAACC,OAAJ,CAAYO,QAAZ,CAAqBC,IAArB,CAA5B,IAA0D,CAACA,IAAI,CAACK,KADlE;AAGD;AAvBM;AAFD,CAAV,C;;;qBA+Bed","names":["AST","helpers","helperExpression","node","type","params","length","hash","scopedId","path","test","original","simpleId","parts","depth"],"sources":["/Users/nandinineralagi/hw3/hw3-santorini-ndnrlg/frontend/node_modules/handlebars/lib/handlebars/compiler/ast.js"],"sourcesContent":["let AST = {\n  // Public API used to evaluate derived attributes regarding AST nodes\n  helpers: {\n    // a mustache is definitely a helper if:\n    // * it is an eligible helper, and\n    // * it has at least one parameter or hash segment\n    helperExpression: function(node) {\n      return (\n        node.type === 'SubExpression' ||\n        ((node.type === 'MustacheStatement' ||\n          node.type === 'BlockStatement') &&\n          !!((node.params && node.params.length) || node.hash))\n      );\n    },\n\n    scopedId: function(path) {\n      return /^\\.|this\\b/.test(path.original);\n    },\n\n    // an ID is simple if it only has one part, and that part is not\n    // `..` or `this`.\n    simpleId: function(path) {\n      return (\n        path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth\n      );\n    }\n  }\n};\n\n// Must be exported as an object rather than the root of the module as the jison lexer\n// must modify the object to operate properly.\nexport default AST;\n"]},"metadata":{},"sourceType":"script"}